<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
myBatis에서는 현재 xml 문서가 Mapper의 역할을 한다는 정의와
Mapper 태그의 문법을 정의하기 위한 DTO 정보를 요구한다.
Mapper 문서에서는 반드시 Mapper를 표현하는 DTO 정보를 표현해야 한다.
-->
<!-- 아래 mapper에서 구현되는 기능은 IProductDAO 추상메소드로 한정된다. -->
<mapper namespace="kr.bluenyang.practice.product.dao.IProductDAO">
    <!-- 전체 상품 조회: select -->
    <!-- 태그 관련 속성:
            id= 태그 고유 식별자 (id가 추상메소드 명과 동일해야 한다.)
            parameterType= 쿼리에 전달할 파라미터 객체의 타입을 지정
            resultType= 반환결과가 필요한 경우 자바 객체의 타입 지정
            resultMap= 결과를 매핑하기 위한 외부 결과 맵 참조 (개발자가 구성해야 함)
            statementType= statement 객체의 유형 지정 (기본값: PREPARED)
     -->
    <!-- ResultMap 구성: 반환되는 rs의 Column과 저장해야 하는 DTO의 필드명을 매핑 -->
    <resultMap id="prdResult" type="kr.bluenyang.practice.product.model.ProductVO">
        <result property="prdNo" column="PRD_NO"/>
        <result property="prdName" column="PRD_NAME"/>
        <result property="prdPrice" column="PRD_PRICE"/>
        <result property="prdCompany" column="PRD_COMPANY"/>
        <result property="prdStock" column="PRD_STOCK"/>
        <result property="prdDate" column="PRD_DATE"/>
    </resultMap>

    <!-- 전체 상품 조회: select -->
    <select id="listAllProduct" resultMap="prdResult">
        select * from product2
    </select>

    <!-- 상품 상세 조회: select -->
    <select id="findProductByPrdNo" parameterType="String" resultMap="prdResult">
        select * from product2 where prd_no = #{prdNo}
    </select>

    <!-- 상품 등록: insert -->
    <insert id="insertProduct" parameterType="kr.bluenyang.practice.product.model.ProductVO">
        insert into product2(prd_no, prd_name, prd_price, prd_company, prd_stock, prd_date)
        values (#{prdNo}, #{prdName}, #{prdPrice}, #{prdCompany}, #{prdStock}, #{prdDate})
    </insert>

    <!-- 상품 수정: update -->
    <update id="updateProduct" parameterType="kr.bluenyang.practice.product.model.ProductVO">
        update product2
        set prd_name = #{prdName},
        prd_price = #{prdPrice},
        prd_company = #{prdCompany},
        prd_stock = #{prdStock},
        prd_date = #{prdDate}
        where prd_no = #{prdNo}
    </update>

    <!-- 상품 삭제: delete -->
    <delete id="deleteProduct" parameterType="String">
        delete from product2 where prd_no = #{prdNo}
    </delete>

    <!-- 상품 검색: select -->
    <select id="searchProduct" parameterType="hashmap" resultMap="prdResult">
        select * from product2 where
        <choose>
            <when test="type != null and type.equals('prdName')">
                prd_name LIKE '%'||#{keyword}||'%'
            </when>
            <when test="type != null and type.equals('prdCompany')">
                prd_company LIKE '%'||#{keyword}||'%'
            </when>
        </choose>
    </select>
</mapper>